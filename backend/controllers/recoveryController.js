// backend/controllers/recoveryController.js
import Usuario from "../models/Usuario.js";
import crypto from "crypto";
import nodemailer from "nodemailer";

// Almacenamiento temporal de c√≥digos (en producci√≥n usar Redis o DB)
const codigosRecuperacion = new Map();

/**
 * Generar c√≥digo de recuperaci√≥n de 6 d√≠gitos
 */
function generarCodigoRecuperacion() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

/**
 * Solicitar c√≥digo de recuperaci√≥n
 * POST /api/recovery/solicitar
 */
export const solicitarRecuperacion = async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({ 
        mensaje: "El correo electr√≥nico es obligatorio." 
      });
    }

    // Validar formato de email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ 
        mensaje: "El formato del correo electr√≥nico no es v√°lido." 
      });
    }

    // Buscar usuario
    const usuario = await Usuario.findOne({ email: email.toLowerCase() });
    
    if (!usuario) {
      // Por seguridad, no revelar si el usuario existe
      console.log(`‚ö†Ô∏è Intento de recuperaci√≥n para email no existente: ${email}`);
      return res.status(200).json({ 
        mensaje: "Si el correo existe, se ha generado un c√≥digo de recuperaci√≥n.",
        codigoGenerado: false
      });
    }

    // Generar c√≥digo de 6 d√≠gitos
    const codigo = generarCodigoRecuperacion();
    
    // Guardar c√≥digo con timestamp (v√°lido por 15 minutos)
    const expiracion = Date.now() + 15 * 60 * 1000;
    codigosRecuperacion.set(email.toLowerCase(), {
      codigo,
      usuarioId: usuario._id.toString(),
      expiracion,
      intentos: 0
    });

    console.log(`üîë C√≥digo de recuperaci√≥n generado para ${email}: ${codigo}`);
    console.log(`‚è∞ C√≥digo v√°lido hasta: ${new Date(expiracion).toLocaleString()}`);

    // En desarrollo, devolver el c√≥digo en la respuesta
    const respuesta = {
      mensaje: "C√≥digo de recuperaci√≥n generado correctamente.",
      codigoGenerado: true,
      email: email
    };

    // Solo en desarrollo: incluir c√≥digo en respuesta
    if (process.env.NODE_ENV === 'development') {
      respuesta.codigoDesarrollo = codigo;
      console.log(`üîì [DEV] C√≥digo incluido en respuesta: ${codigo}`);
    }
    // ‚úâÔ∏è Configurar transporte de correo (usando Gmail, Outlook, etc.)
    const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
      });
  
      const mailOptions = {
        from: `"Soporte FUE" <${process.env.EMAIL_USER}>`,
        to: email,
        subject: "C√≥digo de recuperaci√≥n de contrase√±a",
        text: `Hola ${usuario.nombre || ""},\n\nTu c√≥digo de recuperaci√≥n es: ${codigo}\n\nEste c√≥digo expira en 15 minutos.\n\nSi no solicitaste este c√≥digo, ignora este correo.`,
      };
  
      try {
        await transporter.sendMail(mailOptions);
        console.log(`üìß Correo de recuperaci√≥n enviado a ${email}`);
      } catch (error) {
        console.error("‚ùå Error al enviar correo:", error.message);
        return res.status(500).json({
          mensaje: "Error al enviar el correo de recuperaci√≥n.",
          detalle: error.message,
        });
      }
  
    res.status(200).json(respuesta);

  } catch (error) {
    console.error("‚ùå Error al solicitar recuperaci√≥n:", error);
    res.status(500).json({ 
      mensaje: "Error interno del servidor.",
      detalle: error.message 
    });
  }
};

/**
 * Verificar c√≥digo de recuperaci√≥n
 * POST /api/recovery/verificar
 */
export const verificarCodigo = async (req, res) => {
  try {
    const { email, codigo } = req.body;

    if (!email || !codigo) {
      return res.status(400).json({ 
        mensaje: "Email y c√≥digo son obligatorios." 
      });
    }

    const emailNormalizado = email.toLowerCase();
    const datosRecuperacion = codigosRecuperacion.get(emailNormalizado);

    if (!datosRecuperacion) {
      return res.status(404).json({ 
        mensaje: "No hay solicitud de recuperaci√≥n para este email." 
      });
    }

    // Verificar expiraci√≥n
    if (Date.now() > datosRecuperacion.expiracion) {
      codigosRecuperacion.delete(emailNormalizado);
      return res.status(410).json({ 
        mensaje: "El c√≥digo ha expirado. Solicita uno nuevo." 
      });
    }

    // Verificar intentos
    if (datosRecuperacion.intentos >= 3) {
      codigosRecuperacion.delete(emailNormalizado);
      return res.status(429).json({ 
        mensaje: "Demasiados intentos fallidos. Solicita un nuevo c√≥digo." 
      });
    }

    // Verificar c√≥digo
    if (datosRecuperacion.codigo !== codigo) {
      datosRecuperacion.intentos++;
      const intentosRestantes = 3 - datosRecuperacion.intentos;
      
      return res.status(401).json({ 
        mensaje: `C√≥digo incorrecto. Te quedan ${intentosRestantes} intento(s).`,
        intentosRestantes
      });
    }

    // C√≥digo correcto - generar token temporal
    const tokenRecuperacion = crypto.randomBytes(32).toString('hex');
    
    // Actualizar datos con token
    datosRecuperacion.tokenRecuperacion = tokenRecuperacion;
    datosRecuperacion.tokenExpiracion = Date.now() + 10 * 60 * 1000; // 10 minutos

    console.log(`‚úÖ C√≥digo verificado correctamente para ${email}`);

    res.status(200).json({ 
      mensaje: "C√≥digo verificado correctamente.",
      tokenRecuperacion,
      email: emailNormalizado
    });

  } catch (error) {
    console.error("‚ùå Error al verificar c√≥digo:", error);
    res.status(500).json({ 
      mensaje: "Error interno del servidor.",
      detalle: error.message 
    });
  }
};

/**
 * Restablecer contrase√±a con token
 * POST /api/recovery/restablecer
 */
export const restablecerPassword = async (req, res) => {
  try {
    const { email, tokenRecuperacion, nuevaPassword } = req.body;

    if (!email || !tokenRecuperacion || !nuevaPassword) {
      return res.status(400).json({ 
        mensaje: "Todos los campos son obligatorios." 
      });
    }

    // Validar longitud de contrase√±a
    if (nuevaPassword.length < 6) {
      return res.status(400).json({ 
        mensaje: "La contrase√±a debe tener al menos 6 caracteres." 
      });
    }

    const emailNormalizado = email.toLowerCase();
    const datosRecuperacion = codigosRecuperacion.get(emailNormalizado);

    if (!datosRecuperacion || !datosRecuperacion.tokenRecuperacion) {
      return res.status(404).json({ 
        mensaje: "Sesi√≥n de recuperaci√≥n no encontrada." 
      });
    }

    // Verificar token
    if (datosRecuperacion.tokenRecuperacion !== tokenRecuperacion) {
      return res.status(401).json({ 
        mensaje: "Token de recuperaci√≥n inv√°lido." 
      });
    }

    // Verificar expiraci√≥n del token
    if (Date.now() > datosRecuperacion.tokenExpiracion) {
      codigosRecuperacion.delete(emailNormalizado);
      return res.status(410).json({ 
        mensaje: "El token ha expirado. Inicia el proceso nuevamente." 
      });
    }

    // Buscar usuario
    const usuario = await Usuario.findById(datosRecuperacion.usuarioId);
    
    if (!usuario) {
      return res.status(404).json({ 
        mensaje: "Usuario no encontrado." 
      });
    }

    // Actualizar contrase√±a (el middleware pre('save') la encriptar√°)
    usuario.password = nuevaPassword;
    await usuario.save();

    // Limpiar c√≥digo de recuperaci√≥n
    codigosRecuperacion.delete(emailNormalizado);

    console.log(`‚úÖ Contrase√±a restablecida para usuario: ${usuario.email}`);

    res.status(200).json({ 
      mensaje: "Contrase√±a restablecida exitosamente. Ya puedes iniciar sesi√≥n." 
    });

  } catch (error) {
    console.error("‚ùå Error al restablecer contrase√±a:", error);
    res.status(500).json({ 
      mensaje: "Error interno del servidor.",
      detalle: error.message 
    });
  }
};

/**
 * Limpiar c√≥digos expirados (ejecutar peri√≥dicamente)
 */
export const limpiarCodigosExpirados = () => {
  const ahora = Date.now();
  let eliminados = 0;

  for (const [email, datos] of codigosRecuperacion.entries()) {
    if (ahora > datos.expiracion) {
      codigosRecuperacion.delete(email);
      eliminados++;
    }
  }

  if (eliminados > 0) {
    console.log(`üßπ Limpieza autom√°tica: ${eliminados} c√≥digo(s) expirado(s) eliminado(s)`);
  }
};

// Limpiar c√≥digos cada 5 minutos
setInterval(limpiarCodigosExpirados, 5 * 60 * 1000);

/**
 * [DEV] Obtener c√≥digo actual para un email
 */
export const obtenerCodigoActual = (req, res) => {
  if (process.env.NODE_ENV !== 'development') {
    return res.status(403).json({ mensaje: "Endpoint solo disponible en desarrollo" });
  }

  const { email } = req.query;
  const datos = codigosRecuperacion.get(email?.toLowerCase());

  if (!datos) {
    return res.status(404).json({ mensaje: "No hay c√≥digo para este email" });
  }

  res.json({
    email,
    codigo: datos.codigo,
    expira: new Date(datos.expiracion).toLocaleString(),
    intentos: datos.intentos
  });
};